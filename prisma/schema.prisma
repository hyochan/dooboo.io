generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum AuthType {
  email
  github
  apple
}

model NewsLetter {
  email String @id

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("news_letters")
}

model User {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String?
  name        String?
  description String?
  birthday    DateTime?
  gender      Gender?
  phone       String?
  locale      String?
  certified   Boolean?  @default(false)
  githubLogin String?   @unique @map("github_login")
  location    String?
  company     String?
  blog        String?
  twitter     String?
  githubUrl   String?   @map("github_url")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  image       Image?
  userPlugins UserPlugin[]

  @@map("users")
}

model Image {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  thumbUrl      String? @map("thumb_url")
  thumbUrlHight String? @map("thumb_url_high")
  imageUrl      String? @map("image_url")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId String? @unique @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  @@map("images")
}

model UserPlugin {
  login           String    @id
  githubId        String?   @map("github_id")
  score           Int       @default(0) @db.SmallInt
  userName        String?   @map("user_name")
  avatarUrl       String?   @map("avatar_url")
  description     String?
  json            Json?     @db.Json
  certifiedAt     DateTime? @map("certified_at")
  certificationNo Int?      @map("certification_no")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id") @db.Uuid

  plugin   Plugin? @relation(fields: [pluginId], references: [id])
  pluginId String?  @map("plugin_id")

  viewCount Int? @default(0) @map("view_count")

  stats    Stat[]
  trophies Trophy[]

  @@unique([login, pluginId])
  @@map("user_plugins")
}

model Plugin {
  id          String  @id
  apiUrl      String  @map("api_url")
  description String?
  json        Json?   @db.Json

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userPlugins UserPlugin[]

  @@map("plugins")
}

model Trophy {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type   String
  score  Decimal @db.Decimal(7, 2)
  points Int     @default(0)

  user_plugin       UserPlugin? @relation(fields: [user_plugin_login], references: [login])
  user_plugin_login String?

  @@unique([type, user_plugin_login])

  @@map("trophies")
}

model Stat {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  iconUrl         String? @map("icon_url")
  iconUrlSelected String? @map("icon_url_selected")
  score           Decimal @db.Decimal(7, 2)
  description     String?
  statElement     Json?   @map("stat_element") @db.Json

  userPlugin      UserPlugin? @relation(fields: [userPluginLogin], references: [login])
  userPluginLogin String?     @map("user_plugin_login")

  @@index([userPluginLogin])
  @@map("stats")
}
