generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

enum AuthType {
  email
  github
  apple
}

model news_letters {
  email String @id

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?
}

model users {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String?
  name         String?
  description  String?
  birthday     DateTime?
  gender       Gender?
  phone        String?
  locale       String?
  certified    Boolean?  @default(false)
  github_login String?   @unique
  location     String?
  company      String?
  blog         String?
  twitter      String?
  github_url   String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  image        images?
  user_plugins user_plugins[]
}

model images {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  thumb_url      String?
  thumb_url_high String?
  image_url      String?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  user_id String? @unique @db.Uuid
  user    users?  @relation(fields: [user_id], references: [id])
}

model user_plugins {
  login            String    @id
  github_id        String
  score            Int       @default(0) @db.SmallInt
  user_name        String?
  avatar_url       String?
  description      String?
  json             Json?     @db.Json
  certified_at     DateTime?
  certification_no Int?

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  user    users?  @relation(fields: [user_id], references: [id])
  user_id String? @unique @db.Uuid

  plugin    plugins? @relation(fields: [plugin_id], references: [id])
  plugin_id String?

  viewCount Int? @default(0)

  stats    stats[]
  trophies trophies[]

  @@unique([login, plugin_id])
}

model plugins {
  id          String  @id
  api_url     String
  description String?
  json        Json?   @db.Json

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  user_plugins user_plugins[]
}

model trophies {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type   String
  score  Decimal @db.Decimal(7, 2)
  points Int     @default(0)

  user_plugin       user_plugins? @relation(fields: [user_plugin_login], references: [login])
  user_plugin_login String?

  @@unique([type, user_plugin_login])
}

model stats {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  icon_url          String?
  icon_url_selected String?
  score             Decimal @db.Decimal(7, 2)
  description       String?
  stat_element      Json?   @db.Json

  user_plugin       user_plugins? @relation(fields: [user_plugin_login], references: [login])
  user_plugin_login String?

  @@index([user_plugin_login])
}
